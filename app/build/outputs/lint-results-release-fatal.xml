<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.4.1">

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="This fragment should provide a default constructor (a public constructor with no arguments) (`com.flywolf.familytree.DatePickerFragment`)"
        category="Correctness"
        priority="6"
        summary="Fragment not instantiatable"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="public class DatePickerFragment  extends DialogFragment"
        errorLine2="             ~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/java/com/flywolf/familytree/DatePickerFragment.java"
            line="17"
            column="14"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="Avoid non-default constructors in fragments: use a default constructor plus `Fragment#setArguments(Bundle)` instead"
        category="Correctness"
        priority="6"
        summary="Fragment not instantiatable"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="  public  DatePickerFragment(DbWorker.Relative openInDialog,View dialogView,TextView leafBirthday)"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/java/com/flywolf/familytree/DatePickerFragment.java"
            line="22"
            column="11"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="This fragment should provide a default constructor (a public constructor with no arguments) (`com.flywolf.familytree.MakePhoto`)"
        category="Correctness"
        priority="6"
        summary="Fragment not instantiatable"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="public class MakePhoto extends Fragment {"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/java/com/flywolf/familytree/MakePhoto.java"
            line="30"
            column="14"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="Avoid non-default constructors in fragments: use a default constructor plus `Fragment#setArguments(Bundle)` instead"
        category="Correctness"
        priority="6"
        summary="Fragment not instantiatable"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="    public MakePhoto(DbWorker.Relative openInDialog, View dialogView, ImageView leaf, Context context)"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/java/com/flywolf/familytree/MakePhoto.java"
            line="41"
            column="12"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="This fragment should provide a default constructor (a public constructor with no arguments) (`com.flywolf.familytree.OpenPhoto`)"
        category="Correctness"
        priority="6"
        summary="Fragment not instantiatable"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="public class OpenPhoto extends Fragment {"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/java/com/flywolf/familytree/OpenPhoto.java"
            line="33"
            column="14"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="Avoid non-default constructors in fragments: use a default constructor plus `Fragment#setArguments(Bundle)` instead"
        category="Correctness"
        priority="6"
        summary="Fragment not instantiatable"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="    public OpenPhoto(DbWorker.Relative openInDialog,View dialogView,ImageView leaf,Context context)"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/java/com/flywolf/familytree/OpenPhoto.java"
            line="43"
            column="12"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`generation1`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;generation1&quot;>Generation 1. You are result of seven generations. 126 ancestors&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`generation2`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;generation2&quot;>Generation 2. Mother and father. Get the material basis for evolution&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`generation3`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;generation3&quot;>Generation 3. Grandparents. Get the desire for knowledge, knowledge of the world, inclinations, habits&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`generation4`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;generation4&quot;>Generation 4. Great grandparents. Talents, sense of taste, harmony, attractiveness, ability to love, merits and exploits&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`generation5`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;generation5&quot;>Generation 5. Inherit the ability to influence the fate, willed intelligence, &quot;burning&quot;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`generation6`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;generation6&quot;>Generation 6. Worldview, wisdom, credibility, pride and idealization. Liver and blood problems&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`generation7`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;generation7&quot;>Generation 7. Global goals, debts evident in congenital anomalies, disability&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`openn_dialog_title`&quot; is not translated in &quot;ru&quot; (Russian)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;openn_dialog_title&quot;>View and Edit&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="11"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`screen_saved`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;screen_saved&quot;>Family Tree saved into &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`hello_world`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;ru&quot; (Russian)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;hello_world&quot;>Hello world!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_settings`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean), &quot;ru&quot; (Russian)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_settings&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`email_subject`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;email_subject&quot;>&quot;Family Tree&quot;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`email_body`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;email_body&quot;>&quot;File in an application. Order is formed in the application %s . And suggestions may be sent to flywolf1978@gmail.com&quot;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`market_url`&quot; is not translated in &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;ko&quot; (Korean)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;market_url&quot;>&quot;https://play.google.com/store/apps/details?id=com.flywolf.boxcreator&quot;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/flywolf/AndroidstudioProjects/FamilyTree/app/src/main/res/values/strings.xml"
            line="18"
            column="13"/>
    </issue>

</issues>
